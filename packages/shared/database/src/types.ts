/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/discord_message_queue": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.discord_message_queue.id"];
          created_at?: parameters["rowFilter.discord_message_queue.created_at"];
          updated_at?: parameters["rowFilter.discord_message_queue.updated_at"];
          message?: parameters["rowFilter.discord_message_queue.message"];
          channel_id?: parameters["rowFilter.discord_message_queue.channel_id"];
          status?: parameters["rowFilter.discord_message_queue.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["discord_message_queue"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** discord_message_queue */
          discord_message_queue?: definitions["discord_message_queue"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.discord_message_queue.id"];
          created_at?: parameters["rowFilter.discord_message_queue.created_at"];
          updated_at?: parameters["rowFilter.discord_message_queue.updated_at"];
          message?: parameters["rowFilter.discord_message_queue.message"];
          channel_id?: parameters["rowFilter.discord_message_queue.channel_id"];
          status?: parameters["rowFilter.discord_message_queue.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.discord_message_queue.id"];
          created_at?: parameters["rowFilter.discord_message_queue.created_at"];
          updated_at?: parameters["rowFilter.discord_message_queue.updated_at"];
          message?: parameters["rowFilter.discord_message_queue.message"];
          channel_id?: parameters["rowFilter.discord_message_queue.channel_id"];
          status?: parameters["rowFilter.discord_message_queue.status"];
        };
        body: {
          /** discord_message_queue */
          discord_message_queue?: definitions["discord_message_queue"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/discord_subscriptions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.discord_subscriptions.id"];
          created_at?: parameters["rowFilter.discord_subscriptions.created_at"];
          updated_at?: parameters["rowFilter.discord_subscriptions.updated_at"];
          keyword?: parameters["rowFilter.discord_subscriptions.keyword"];
          channel_id?: parameters["rowFilter.discord_subscriptions.channel_id"];
          last_run_at?: parameters["rowFilter.discord_subscriptions.last_run_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["discord_subscriptions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** discord_subscriptions */
          discord_subscriptions?: definitions["discord_subscriptions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.discord_subscriptions.id"];
          created_at?: parameters["rowFilter.discord_subscriptions.created_at"];
          updated_at?: parameters["rowFilter.discord_subscriptions.updated_at"];
          keyword?: parameters["rowFilter.discord_subscriptions.keyword"];
          channel_id?: parameters["rowFilter.discord_subscriptions.channel_id"];
          last_run_at?: parameters["rowFilter.discord_subscriptions.last_run_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.discord_subscriptions.id"];
          created_at?: parameters["rowFilter.discord_subscriptions.created_at"];
          updated_at?: parameters["rowFilter.discord_subscriptions.updated_at"];
          keyword?: parameters["rowFilter.discord_subscriptions.keyword"];
          channel_id?: parameters["rowFilter.discord_subscriptions.channel_id"];
          last_run_at?: parameters["rowFilter.discord_subscriptions.last_run_at"];
        };
        body: {
          /** discord_subscriptions */
          discord_subscriptions?: definitions["discord_subscriptions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  discord_message_queue: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: character varying */
    message?: string;
    /** Format: character varying */
    channel_id?: string;
    /** Format: character varying */
    status?: string;
  };
  discord_subscriptions: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /** Format: ARRAY */
    keyword: unknown[];
    /** Format: character varying */
    channel_id?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    last_run_at?: string;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    website?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description discord_message_queue */
  "body.discord_message_queue": definitions["discord_message_queue"];
  /** Format: bigint */
  "rowFilter.discord_message_queue.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.discord_message_queue.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.discord_message_queue.updated_at": string;
  /** Format: character varying */
  "rowFilter.discord_message_queue.message": string;
  /** Format: character varying */
  "rowFilter.discord_message_queue.channel_id": string;
  /** Format: character varying */
  "rowFilter.discord_message_queue.status": string;
  /** @description discord_subscriptions */
  "body.discord_subscriptions": definitions["discord_subscriptions"];
  /** Format: bigint */
  "rowFilter.discord_subscriptions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.discord_subscriptions.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.discord_subscriptions.updated_at": string;
  /** Format: ARRAY */
  "rowFilter.discord_subscriptions.keyword": string;
  /** Format: character varying */
  "rowFilter.discord_subscriptions.channel_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.discord_subscriptions.last_run_at": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** Format: text */
  "rowFilter.profiles.website": string;
}

export interface operations {}

export interface external {}
